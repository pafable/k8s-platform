final String agentLabel = 'jenkins-agent'
final String jenkinsParamName = 'JENKINS_AGENT_TAG'
final String platformBranch = 'refs/heads/master'
final String platformRepo = 'https://github.com/pafable/k8s-platform.git'

// job descriptions
final String appsDesc = 'Apps deployer'
final String dnsDesc = "DNS updater"
final String jenkinsDesc = 'Jenkins agent builder'
final String jenkinsParamDesc = 'Tag for Jenkins agent'
final String k3sInfraDesc = 'Builds k3s infra'
final String packyDesc = 'Builds images'

final def jobsToScripts = [
    'agent-builder': 'cicd/agent-builder/Jenkinsfile',
    'apps-deployer': 'cicd/apps/Jenkinsfile',
    'dns-updater': 'cicd/dns/Jenkinsfile',
    'k3s-infra-factory': 'cicd/k3s/Jenkinsfile',
    'packy': 'cicd/packy/Jenkinsfile'
]

pipeline {
    agent {
      label "${agentLabel}"
    }

    options {
        ansiColor('xterm')
        timeout(
            time: 5,
            unit: 'MINUTES'
        )
    }

    stages {
        stage('seeding') {
            steps {
                script {
                    jobsToScripts.each {
                        final job, final path ->
                            if (job == 'agent-builder') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${jenkinsDesc}")
                                        parameters {
                                            stringParam {
                                                description("${jenkinsParamDesc}")
                                                name("${jenkinsParamName}")
                                                trim(true)
                                            }
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platformRepo}")
                                                        }
                                                        branch("${platformBranch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            }

                            if (job == 'apps-deployer') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${appsDesc}")
                                        parameters {
                                            choiceParam(
                                                'ACTIONS',
                                                [
                                                    'create',
                                                    'destroy'
                                                ],
                                                'Create or destroy'
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platformRepo}")
                                                        }
                                                        branch("${platformBranch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            }

                            if (job == 'dns-updater') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${dnsDesc}")
                                        parameters {
                                            choiceParam(
                                                'ACTIONS',
                                                [
                                                    'create',
                                                    'destroy'
                                                ],
                                                'Create or destroy'
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platformRepo}")
                                                        }
                                                        branch("${platformBranch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            }

                            if (job == 'k3s-infra-factory') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${k3sInfraDesc}")
                                        parameters {
                                            choiceParam(
                                                'ACTIONS',
                                                [
                                                    'create',
                                                    'destroy'
                                                ],
                                                'Create or destroy'
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platformRepo}")
                                                        }
                                                        branch("${platformBranch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            }

                            if (job == 'packy') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${packyDesc}")
                                        parameters {
                                            choiceParam(
                                                'DISTRO',
                                                [
                                                    'debian',
                                                    'oracle',
                                                    'rocky',
                                                    'ubuntu'
                                                ],
                                                'linux distribution'
                                            )

                                            choiceParam(
                                                'ISO_NAME',
                                                [
                                                    'OracleLinux-R9-U4-x86_64-boot.iso',
                                                    'Rocky-9.4-x86_64-boot.iso',
                                                    'debian-12.7.0-amd64-netinst.iso',
                                                    'ubuntu-24.04.1-live-server-amd64.iso'
                                                ],
                                                'iso names'
                                            )

                                            choiceParam(
                                                'PROXMOX_NODE',
                                                [
                                                    'behemoth',
                                                    'kraken',
                                                    'leviathan'
                                                ],
                                                'proxmox nodes'
                                            )

                                            stringParam(
                                                'TEMPLATE_NAME',
                                                null,
                                                'template name'
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platformRepo}")
                                                        }
                                                        branch("${platformBranch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            }
                    }
                }
            }
        }
    }
}