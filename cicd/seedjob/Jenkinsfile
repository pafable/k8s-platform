final String agent_label = 'jenkins-agent'
final String jenkins_param_name = 'JENKINS_AGENT_TAG'
final String platform_branch = 'refs/heads/master'
final String platform_repo = 'https://github.com/pafable/k8s-platform.git'

// job descriptions
final String apps_desc = 'Apps deployer'
final String dns_desc = "DNS updater"
final String jenkins_desc = 'Jenkins agent builder'
final String jenkins_param_desc = 'Tag for Jenkins agent'
final String k3sInfraDesc = 'Builds k3s infra'
final String packyDesc = 'Builds images'

final def jobsToScripts = [
    'agent-builder': 'cicd/agent-builder/Jenkinsfile',
    'apps-deployer': 'cicd/apps/Jenkinsfile',
    'dns-updater': 'cicd/dns/Jenkinsfile',
    'k3s-infra-factory': 'cicd/k3s/Jenkinsfile',
    'packy': 'cicd/image/Jenkinsfile'
]

pipeline {
    agent {
      label "${agent_label}"
    }

    options {
        ansiColor('xterm')
        timeout(
            time: 5,
            unit: 'MINUTES'
        )
    }

    stages {
        stage('seeding') {
            steps {
                script {
                    jobsToScripts.each {
                        final job, final path ->
                            if (job != 'agent-builder' && job != 'dns-updater' && job != 'k3s-infra-factory' && job != 'packy')
                            {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${apps_desc}")
                                        parameters {
                                            choiceParam(
                                                'ACTIONS',
                                                [
                                                    'create',
                                                    'destroy'
                                                ],
                                                'Create or destroy'
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platform_repo}")
                                                        }
                                                        branch("${platform_branch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            } else if (job == 'dns-updater') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${dns_desc}")
                                        parameters {
                                            choiceParam(
                                                'ACTIONS',
                                                [
                                                    'create',
                                                    'destroy'
                                                ],
                                                'Create or destroy'
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platform_repo}")
                                                        }
                                                        branch("${platform_branch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            } else if (job == 'k3s-infra-factory') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${k3sInfraDesc}")
                                        parameters {
                                            choiceParam(
                                                'ACTIONS',
                                                [
                                                    'create',
                                                    'destroy'
                                                ],
                                                'Create or destroy'
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platform_repo}")
                                                        }
                                                        branch("${platform_branch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            } else if (job == 'packy') {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${packyDesc}")
                                        parameters {
                                            choiceParam(
                                                'ACTIONS',
                                                [
                                                    'build',
                                                    'destroy'
                                                ],
                                                'build or destroy'
                                            )

                                            stringParam(
                                                'TEMPLATE_NAME',
                                                '',
                                                'template name',
                                                true
                                            )
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platform_repo}")
                                                        }
                                                        branch("${platform_branch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            } else {
                                jobDsl scriptText: """
                                    pipelineJob("${job}") {
                                        description("${jenkins_desc}")
                                        parameters {
                                            stringParam {
                                                description("${jenkins_param_desc}")
                                                name("${jenkins_param_name}")
                                                trim(true)
                                            }
                                        }
                                        definition {
                                            cpsScm {
                                                scm {
                                                    git {
                                                        remote {
                                                            url("${platform_repo}")
                                                        }
                                                        branch("${platform_branch}")
                                                    }
                                                }
                                                scriptPath("${path}")
                                                lightweight()
                                            }
                                        }
                                        properties {
                                            disableConcurrentBuilds()
                                            disableResume()
                                        }
                                    }
                                """
                            }
                    }
                }
            }
        }
    }
}