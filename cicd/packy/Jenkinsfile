final String agentLabel = 'jenkins-agent'
final String awsCreds = 'aws-dev-deployer-creds'
final String proxmoxCreds = 'proxmox-api-creds'
final String tfVersion = 'tf-1-9-8'

final def distros = [
    'oracle',
    'rocky',
    'ubuntu'
]

final def isoNames = [
    'OracleLinux-R9-U4-x86_64-boot.iso',
    'Rocky-9.4-x86_64-boot.iso',
    'debian-12.7.0-amd64-netinst.iso',
    'ubuntu-24.04.1-live-server-amd64.iso'
]

final def proxmoxNodes = [
    'behemoth',
    'kraken',
    'leviathan'
]

pipeline {
    agent {
      label agentLabel
    }

    environment {
        PROXMOX = credentials("${proxmoxCreds}")
        PKR_VAR_proxmox_username = "${PROXMOX_USR}"
        PKR_VAR_proxmox_token = "${PROXMOX_PSW}"
        PKR_VAR_proxmox_url = "192.168.109.2"
    }

    options {
        ansiColor('xterm')
        timeout(
            time: 8,
            unit: 'MINUTES'
        )
    }

    parameters {
        choice choices: distros,
        description: 'linux distribution',
        name: 'DISTRIBUTION'

        choice choices: isoNames,
        description: 'iso names',
        name: 'ISO_NAME'

        choice choices: proxmoxNodes,
        description: 'proxmox nodes',
        name: 'PROXMOX_NODE'

        string description: 'template name',
        trim: true,
        name: 'TEMPLATE_NAME'
    }

    tools {
        terraform tfVersion
    }

    stages {
        stage('confirmation') {
            input {
                message """
                building a Proxmox template from ${params.ISO_NAME}

                 distribution: ${params.DISTRIBUTION}
                     iso name: ${params.ISO_NAME}
                 proxmox node: ${params.PROXMOX_NODE}
                template name: ${params.TEMPLATE_NAME}

                CONTINUE WITH BUILDING IMAGE TEMPLATE?
                """
                ok "GogogOGog1!1!"
            }
            steps {
                println "packer doing packing things..."
            }
        }

        stage('packing image') {
            steps {
                script {
                    println "task packer-${params.DISTRIBUTION}-build"
                    sh """
                        env
                        task packer-${params.DISTRIBUTION}-build
                    """
                }
            }
        }
    }
}