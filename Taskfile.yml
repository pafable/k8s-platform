version: '3'

dotenv: ['.env']

env:
  AWS_REGION: us-east-1
  DNS_ZONE: YOUR-DNS-ZONE
  EKS_CLUSTER_NAME: k8s-platform
  ELB_DNS_NAME: elb-dns-name

  # Terraform Backend Buckets
  TF_BACKEND_BUCKET_DEV: pafable-tfstates-100
  TF_BACKEND_BUCKET_PROD: YOUR-TF-BACKEND-BUCKET-PROD

  # Terraform Directories for AWS
  TF_ATLANTIS_DIR: terraform/aws/atlantis
  TF_CLIENT_VPN_DIR: terraform/aws/client-vpn
  TF_DNS_DIR: terraform/aws/dns
  TF_EKS_DIR: terraform/aws/eks
  TF_KUBE_SUPP_DIR: terraform/aws/kube-support
  TF_VPC_AWS_DIR: terraform/aws/vpc

  # Terraform Directories for cluster apps
  TF_APPS_DIR: terraform/apps

  # Terraform modules
  TF_MODULES_DIR: terraform/modules

  # Proxmox dirs
  PROXMOX_K3S_INFRA_DIR: terraform/proxmox/k3s-infra
  PROXMOX_PACKER_ORACLE_DIR: packer/proxmox/oracle
  PROXMOX_PACKER_ROCKY_DIR: packer/proxmox/rocky

  TF_WORKSPACE: dev # sets the terraform workspace

  # Agent tag
  JENKINS_AGENT_IMAGE_DIR: dockerfiles/jenkins-agents
  JENKINS_IMAGE: myagent
  CONTAINER_REGISTRY: boomb0x

  # Used for variables in Terraform
  BRANCH:
    sh: git rev-parse --abbrev-ref HEAD
  COMMIT:
    sh: git rev-parse HEAD

  # if this is set to k3s-config
  # it will be deployed to k3s cluster
  KUBECONFIG: ~/.kube/k3s-config

tasks:
  install-prereqs:
    desc: Install prerequisites (ONLY RUN ON MACOS)
    cmds:
      - brew install jq

  fmt:
    desc: Format terraform files
#    deps:
#      - install-prereqs
    cmds:
      - terraform -chdir=terraform fmt --recursive
      - packer fmt -recursive packer

  connect-eks-cluster:
    desc: Connect to EKS cluster
    cmds:
      - aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}

  tf-ws-list:
    desc: Terraform workspace list
    cmds:
      - terraform -chdir="{{ .DIR }}" workspace list

  tf-validate:
    desc: Validate terraform files
    cmds:
      - terraform -chdir="{{ .DIR }}" validate
    ignore_error: true

  # Atlantis
  init-atlantis:
    dir: '{{ .TF_ATLANTIS_DIR }}'
    deps:
      - fmt
    desc: Initialize Atlantis terraform
    cmds:
      - echo "+++++ Deploying Atlantis +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${TF_ATLANTIS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-atlantis:
    dir: '{{ .TF_ATLANTIS_DIR }}'
    deps:
      - init-atlantis
    desc: Create Atlantis terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var-file=terraform.tfvars -var "github_token=${GH_TOKEN}" -var "github_webhook_secret=${GH_WEBHOOK_SECRET}" -out=tfplan
      - terraform apply tfplan

  destroy-atlantis:
    dir: '{{ .TF_ATLANTIS_DIR }}'
    deps:
      - init-atlantis
    desc: Destroy Atlantis terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var-file=terraform.tfvars -var "github_token=${GH_TOKEN}" -var "github_webhook_secret=$GH_WEBHOOK_SECRET" -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

  # Install CRDs
  install-crds:
    desc: Install CRDs
    cmds:
      # Cert-Manager CRD, v1.15.3
      - kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.3/cert-manager.crds.yaml # this is needed because cert-manager crd is needed to create issuer
      # Gateway-API CRD, v1.0.0
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml # this is needed because gateway crd is needed to create kong-ingress and kong-mesh
      # Kong Ingress CRDs
      - kubectl apply -f https://raw.githubusercontent.com/Kong/charts/main/charts/kong/crds/custom-resource-definitions.yaml
      # Argocd CRDs
      - kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/application-crd.yaml
      - kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/applicationset-crd.yaml
      - kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/appproject-crd.yaml
      # Karpenter CRDs
#      - kubectl apply -f https://raw.githubusercontent.com/aws/karpenter/main/pkg/apis/crds/karpenter.sh_nodepools.yaml
#      - kubectl apply -f https://raw.githubusercontent.com/aws/karpenter/main/pkg/apis/crds/karpenter.sh_nodeclaims.yaml
#      - kubectl apply -f https://raw.githubusercontent.com/aws/karpenter/main/pkg/apis/crds/karpenter.k8s.aws_ec2nodeclasses.yaml

  # Delete CRDs
  delete-crds:
    desc: Delete CRDs
    cmds:
      # Chaos Mesh CRDs
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_awschaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_azurechaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_blockchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_dnschaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_gcpchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_httpchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_iochaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_jvmchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_kernelchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_networkchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_physicalmachinechaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_physicalmachines.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podhttpchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podiochaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podnetworkchaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_remoteclusters.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_schedules.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_statuschecks.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_stresschaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_timechaos.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_workflownodes.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_workflows.yaml --ignore-not-found
      # Kube Kube-Prometheus-Stack CRDs
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-alertmanagerconfigs.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-alertmanagers.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-podmonitors.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-probes.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheusagents.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheuses.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheusrules.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-scrapeconfigs.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-servicemonitors.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-thanosrulers.yaml --ignore-not-found
      # Aqua Security CRDS
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clustercompliancereports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clusterconfigauditreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clusterinfraassessmentreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clusterrbacassessmentreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clustersbomreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clustervulnerabilityreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_configauditreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_exposedsecretreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_infraassessmentreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_rbacassessmentreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_sbomreports.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_vulnerabilityreports.yaml --ignore-not-found
      # Argocd CRDs
      - kubectl delete -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/application-crd.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/applicationset-crd.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/appproject-crd.yaml --ignore-not-found
      # Kong Ingress CRDs
      - kubectl delete -f https://raw.githubusercontent.com/Kong/charts/main/charts/kong/crds/custom-resource-definitions.yaml --ignore-not-found
      # Kong CRD, v1.0.0 is needed for kong
      - kubectl delete -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml  --ignore-not-found # kong-ingress supports only v1.0.0
      - kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.1/cert-manager.crds.yaml --ignore-not-found

      # Remove Abandoned Namespaces
      - kubectl delete namespace argo-example-app --ignore-not-found
      - kubectl delete namespace cert-manager --ignore-not-found
      - kubectl delete namespace my-app-dev --ignore-not-found
    ignore_error: true

  delete-karpenter-crds:
    desc: Delete Karpenter CRDs # needed because ec2nodeclasses fails due to an existing nodepool in terraform
    cmds:
      - kubectl delete -f https://raw.githubusercontent.com/aws/karpenter/main/pkg/apis/crds/karpenter.sh_nodepools.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aws/karpenter/main/pkg/apis/crds/karpenter.sh_nodeclaims.yaml --ignore-not-found
      - kubectl delete -f https://raw.githubusercontent.com/aws/karpenter/main/pkg/apis/crds/karpenter.k8s.aws_ec2nodeclasses.yaml --ignore-not-found
    ignore_error: true

  # apps
  init-apps:
    dir: '{{ .TF_APPS_DIR }}'
    deps:
      - task: fmt
    desc: Initialize Apps terraform
    cmds:
      - echo "+++++ Initializing Kube Apps +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${TF_APPS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure -no-color
      - task: tf-validate
        vars: { DIR: '{{ .TF_APPS_DIR }}' }
      - task: tf-ws-list
        vars: { DIR: '{{ .TF_APPS_DIR }}' }

  create-apps:
    dir: '{{ .TF_APPS_DIR }}'
    deps:
      - task: install-crds
      - task: init-apps
    desc: Create Apps terraform
    cmds:
      - defer: |
          echo "Cleaning up terraform plans..."
          rm -f tfplan*
      - terraform plan -out=tfplan -no-color
      - terraform apply tfplan -no-color

  destroy-apps:
    dir: '{{ .TF_APPS_DIR }}'
    desc: Destroy Apps terraform
    deps:
      - task: init-apps
    cmds:
      - defer: |
          echo "Cleaning up terraform plans..."
          rm -f tfplan*
      - terraform plan -out=tfplan.destroy -destroy -no-color
      - terraform apply tfplan.destroy -no-color
      - task: delete-crds
    ignore_error: true

# EKS
  init-eks:
    dir: '{{ .TF_EKS_DIR }}'
    deps:
      - fmt
    desc: Initialize EKS terraform
    cmds:
      - echo "+++++ Deploying EKS +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${TF_EKS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure -no-color

  create-eks:
    dir: '{{ .TF_EKS_DIR }}'
    deps:
      - init-eks
    desc: Create EKS terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -out=tfplan -no-color
      - terraform apply tfplan -no-color

  destroy-eks:
    dir: '{{ .TF_EKS_DIR }}'
    deps:
      - init-eks
    desc: Destroy EKS terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -out=tfplan.destroy -destroy -no-color
      - terraform apply tfplan.destroy -no-color

# Kube Support Resources
  init-kube-support:
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    deps:
      - fmt
    desc: Initialize Kube Support
    cmds:
      - echo "+++++ Deploying Kube Support +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${TF_KUBE_SUPP_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure -no-color
      - task: tf-validate
        vars: { DIR: '{{ .TF_KUBE_SUPP_DIR }}' }
      - task: tf-ws-list
        vars: { DIR: '{{ .TF_KUBE_SUPP_DIR }}' }

  create-kube-support:
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    deps:
      - task: install-crds
      - task: init-kube-support
    desc: Create Kube Support
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -out=tfplan -no-color
      - terraform apply tfplan -no-color

  destroy-kube-support:
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    deps:
      - init-kube-support
    desc: Destroy Kube Support
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -out=tfplan.destroy -destroy -no-color
      - terraform apply tfplan.destroy -no-color
      - task: delete-crds

# DNS Update
  retrieve-elb:
    desc: Retrieve ELB DNS Name
    cmds:
      - AWS_PAGER="" aws elb describe-load-balancers --region us-east-1 --query 'LoadBalancerDescriptions[0].DNSName' --output text

  init-dns:
    dir: '{{ .TF_DNS_DIR }}'
    deps:
      - fmt
    desc: Initialize DNS
    cmds:
      - echo "+++++ Deploying DNS +++++"
      - terraform init -backend-config="bucket={$TF_BACKEND_BUCKET_PROD}" -backend-config="encrypt=true" -backend-config="key=terraform/dns/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure -no-color

  create-dns:
    dir: '{{ .TF_DNS_DIR }}'
    deps:
      - init-dns
    desc: Create DNS
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -var "commit=${COMMIT}" -var "dns_zone=${DNS_ZONE}" -var "elb_dns_name=${ELB_DNS_NAME}" -out=tfplan -no-color
      - terraform apply tfplan -no-color

  destroy-dns:
    dir: '{{ .TF_DNS_DIR }}'
    deps:
      - init-dns
    desc: Destroy DNS
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -out=tfplan.destroy -destroy -no-color
      - terraform apply tfplan.destroy -no-color

# Create VPC
  init-vpc:
    dir: '{{ .TF_VPC_AWS_DIR }}'
    deps:
      - fmt
    desc: Initialize VPC
    cmds:
      - echo "+++++ Deploying VPC +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${TF_VPC_AWS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure -no-color

  create-vpc:
    dir: '{{ .TF_VPC_AWS_DIR }}'
    deps:
      - init-vpc
    desc: Create VPC
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -out=tfplan -no-color
      - terraform apply tfplan -no-color

  destroy-vpc:
    dir: '{{ .TF_VPC_AWS_DIR }}'
    deps:
      - init-vpc
    desc: Destroy VPC
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -out=tfplan.destroy -destroy -no-color
      - terraform apply tfplan.destroy -no-color

  # Create VPN
  init-vpn:
    dir: '{{ .TF_CLIENT_VPN_DIR }}'
    deps:
      - fmt
    desc: Initialize VPN
    cmds:
      - echo "+++++ Deploying VPN +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${TF_CLIENT_VPN_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure -no-color

  create-vpn:
    dir: '{{ .TF_CLIENT_VPN_DIR }}'
    deps:
      - init-vpn
    desc: Create VPN
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -out=tfplan -no-color
      - terraform apply tfplan -no-color

  destroy-vpn:
    dir: '{{ .TF_CLIENT_VPN_DIR }}'
    deps:
      - init-vpn
    desc: Destroy VPN
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -out=tfplan.destroy -destroy -no-color
      - terraform apply tfplan.destroy -no-color

# Deploy or Destroy cluster
  create-cluster:
    desc: Create Cluster
    cmds:
      - task: create-vpc
      - task: create-eks
      - task: connect-eks-cluster
      - task: create-kube-support

  destroy-cluster:
    desc: Destroy Cluster
    cmds:
      - task: destroy-kube-support
      - task: destroy-eks
      - task: destroy-vpc

# Deploy or Destroy all
  create-all:
    desc: Create All
    cmds:
      - task: deploy-cluster
      - task: create-atlantis

  destroy-all:
    desc: Destroy All
    cmds:
      - task: destroy-atlantis
      - task: destroy-cluster

# Trivy scans
  trivy-atlantis:
    desc: Trivy scan for Atlantis
    dir: '{{ .TF_ATLANTIS_DIR }}'
    cmds:
      - trivy config --tf-vars terraform.tfvars .

  trivy-eks:
    desc: Trivy scan for EKS
    dir: '{{ .TF_EKS_DIR }}'
    cmds:
      - trivy config . --severity HIGH,CRITICAL

  trivy-kube-support:
    desc: Trivy scan for Kube Support
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    cmds:
      - trivy config .

  trivy-apps:
    desc: Trivy scan for cluster apps
    dir: '{{ .TF_APPS_DIR }}'
    cmds:
      - trivy config . --severity HIGH,CRITICAL

  build-jagent-image:
    desc: Build jenkins agent image
    dir: '{{ .JENKINS_AGENT_IMAGE_DIR }}'
    cmds:
      - docker build -t {{ .CONTAINER_REGISTRY }}/{{ .JENKINS_IMAGE }}:{{ .JENKINS_AGENT_TAG }} .
      - docker images | grep {{ .CONTAINER_REGISTRY }}/{{ .JENKINS_IMAGE }}

  push-jagent-image:
    desc: Push jenkins docker image to a container registry
    cmds:
      - docker push {{ .CONTAINER_REGISTRY }}/{{ .JENKINS_IMAGE }}:{{ .JENKINS_AGENT_TAG }}

  proxmox-k3s-infra-init:
    dir: '{{ .PROXMOX_K3S_INFRA_DIR }}'
    deps:
      - task: fmt
    desc: Initialize Proxmox infra
    cmds:
      - echo "+++++ Initializing Proxmox K3S Infra +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${PROXMOX_K3S_INFRA_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure
      - task: tf-validate
        vars: { DIR: '{{ .PROXMOX_K3S_INFRA_DIR }}' }
      - task: tf-ws-list
        vars: { DIR: '{{ .PROXMOX_K3S_INFRA_DIR }}' }

  proxmox-k3s-infra-create:
    desc: Create Proxmox infrastructure
    dir: '{{ .PROXMOX_K3S_INFRA_DIR }}'
    deps:
      - task: proxmox-k3s-infra-init
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -out=tfplan
      - terraform apply tfplan

  proxmox-k3s-infra-destroy:
    desc: Destroy Proxmox infrastructure
    dir: '{{ .PROXMOX_K3S_INFRA_DIR }}'
    deps:
      - task: proxmox-k3s-infra-init
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan-destroy
      - terraform plan -out=tfplan-destroy -destroy
      - terraform apply tfplan-destroy

  packer-ol-build:
    desc: Build Oracle linux image
    dir: '{{ .PROXMOX_PACKER_ORACLE_DIR }}'
    deps:
      - task: fmt
    cmds:
      - packer init .
      - packer validate -var-file=vars.pkrvars.hcl .
      - packer build -var-file=vars.pkrvars.hcl .

  packer-rl-build:
    desc: Build Rocky linux image
    dir: '{{ .PROXMOX_PACKER_ROCKY_DIR }}'
    deps:
      - task: fmt
    cmds:
      - packer init .
      - packer validate -var-file=vars.pkrvars.hcl .
      - packer build -var-file=vars.pkrvars.hcl .