version: '3'

dotenv: ['.env']

env:
  DNS_ZONE: YOUR-DNS-ZONE
  EKS_CLUSTER_NAME: xyz
  ELB_DNS_NAME: elb-dns-name

  # Terraform Backend Buckets
  TF_BACKEND_BUCKET_DEV: YOUR-TF-BACKEND-BUCKET-DEV
  TF_BACKEND_BUCKET_PROD: YOUR-TF-BACKEND-BUCKET-PROD

  # Terraform Directories for AWS
  TF_ATLANTIS_DIR: terraform/aws/atlantis
  TF_CLIENT_VPN_DIR: terraform/aws/client-vpn
  TF_DNS_DIR: terraform/aws/dns
  TF_EKS_AWS_DIR: terraform/aws/eks
  TF_KARPENTER_MANIFESTS_DIR: terraform/aws/karpenter-manifests
  TF_KUBE_SUPP_DIR: terraform/aws/kube-support
  TF_MONITORING_DIR: terraform/aws/monitoring
  TF_VPC_AWS_DIR: terraform/aws/vpc

  # Terraform Directories for Local Cluster
  TF_APPS_LOCAL_DIR: terraform/local-cluster/apps

  # Terraform modules
  TF_MODULES_DIR: terraform/modules

  TF_WORKSPACE: dev # sets the terraform workspace

  # Used for variables in Terraform
  BRANCH:
    sh: git rev-parse --abbrev-ref HEAD
  COMMIT:
    sh: git rev-parse HEAD

tasks:
  install-prereqs:
    desc: Install prerequisites (ONLY RUN ON MACOS)
    cmds:
      - brew install jq

  fmt:
    desc: Format terraform files
#    deps:
#      - install-prereqs
    cmds:
      - terraform -chdir=terraform fmt --recursive

  connect-eks-cluster:
    desc: Connect to EKS cluster
    cmds:
      - aws eks --region us-east-1 update-kubeconfig --name ${EKS_CLUSTER_NAME}

  tf-ws-list:
    desc: Terraform workspace list
    cmds:
      - terraform -chdir="{{ .DIR }}" workspace list

# Atlantis
  init-atlantis:
    dir: '{{ .TF_ATLANTIS_DIR }}'
    deps:
      - fmt
    desc: Initialize Atlantis terraform
    cmds:
      - echo "+++++ Deploying Atlantis +++++"
      - terraform init -backend-config="bucket=${TF_BACKEND_BUCKET_DEV}" -backend-config="encrypt=true" -backend-config="key=${TF_ATLANTIS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-atlantis:
    dir: '{{ .TF_ATLANTIS_DIR }}'
    deps:
      - init-atlantis
    desc: Create Atlantis terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var-file=terraform.tfvars -var "github_token=${GH_TOKEN}" -var "github_webhook_secret=${GH_WEBHOOK_SECRET}" -out=tfplan
      - terraform apply tfplan

  destroy-atlantis:
    dir: '{{ .TF_ATLANTIS_DIR }}'
    deps:
      - init-atlantis
    desc: Destroy Atlantis terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var-file=terraform.tfvars -var "github_token=${GH_TOKEN}" -var "github_webhook_secret=$GH_WEBHOOK_SECRET" -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

  # apps local
  init-apps-local:
    dir: '{{ .TF_APPS_LOCAL_DIR }}'
    deps:
      - task: fmt
      - task: tf-ws-list
        vars: { DIR: '{{ .TF_APPS_LOCAL_DIR }}' }
    desc: Initialize Kube Apps terraform
    cmds:
      - echo "+++++ Initializing Kube Apps +++++"
      - terraform init -upgrade -reconfigure

  create-apps-local:
    dir: '{{ .TF_APPS_LOCAL_DIR }}'
    deps:
      - task: init-apps-local
    desc: Create Kube Apps terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      # Cert-Manager CRD, v1.15.0
      - kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.0/cert-manager.crds.yaml # this is needed because cert-manager crd is needed to create issuer
      # Gateway-API CRD, v1.0.0
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml # this is needed because gateway crd is needed to create kong-ingress and kong-mesh
      # Kong Ingress CRDs
      - kubectl apply -f https://raw.githubusercontent.com/Kong/charts/main/charts/kong/crds/custom-resource-definitions.yaml
      # Argocd CRDs
      - kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/application-crd.yaml
      - kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/applicationset-crd.yaml
      - kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/appproject-crd.yaml
      - terraform plan -out=tfplan
      - terraform apply tfplan

  destroy-apps-local:
    dir: '{{ .TF_APPS_LOCAL_DIR }}'
    desc: Destroy Kube Apps terraform
    deps:
      - task: init-apps-local
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy
      # Chaos Mesh CRDs
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_awschaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_azurechaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_blockchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_dnschaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_gcpchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_httpchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_iochaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_jvmchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_kernelchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_networkchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_physicalmachinechaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_physicalmachines.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podhttpchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podiochaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_podnetworkchaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_remoteclusters.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_schedules.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_statuschecks.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_stresschaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_timechaos.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_workflownodes.yaml
      - kubectl delete -f https://raw.githubusercontent.com/chaos-mesh/chaos-mesh/master/helm/chaos-mesh/crds/chaos-mesh.org_workflows.yaml
      # Kube Kube-Prometheus-Stack CRDs
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-alertmanagerconfigs.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-alertmanagers.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-podmonitors.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-probes.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheusagents.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheuses.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-prometheusrules.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-scrapeconfigs.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-servicemonitors.yaml
      - kubectl delete -f https://raw.githubusercontent.com/prometheus-community/helm-charts/main/charts/kube-prometheus-stack/charts/crds/crds/crd-thanosrulers.yaml
      # Aqua Security CRDS
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clustercompliancereports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clusterconfigauditreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clusterinfraassessmentreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clusterrbacassessmentreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clustersbomreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_clustervulnerabilityreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_configauditreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_exposedsecretreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_infraassessmentreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_rbacassessmentreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_sbomreports.yaml
      - kubectl delete -f https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/deploy/helm/crds/aquasecurity.github.io_vulnerabilityreports.yaml
      # Argocd CRDs
      - kubectl delete -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/application-crd.yaml
      - kubectl delete -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/applicationset-crd.yaml
      - kubectl delete -f https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/crds/appproject-crd.yaml
      # Kong Ingress CRDs
      - kubectl delete -f https://raw.githubusercontent.com/Kong/charts/main/charts/kong/crds/custom-resource-definitions.yaml
      # Kong CRD, v1.0.0 is needed for kong
      - kubectl delete -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml # kong-ingress supports only v1.0.0
      - kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.0/cert-manager.crds.yaml
      # Remove Cert Manager Namespace
      - kubectl delete namespace cert-manager
    ignore_error: true

# EKS
  init-eks:
    dir: '{{ .TF_EKS_AWS_DIR }}'
    deps:
      - fmt
    desc: Initialize EKS terraform
    cmds:
      - echo "+++++ Deploying EKS +++++"
      - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET_DEV" -backend-config="encrypt=true" -backend-config="key=${TF_EKS_AWS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-eks:
    dir: '{{ .TF_EKS_AWS_DIR }}'
    deps:
      - init-eks
    desc: Create EKS terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -out=tfplan
      - terraform apply tfplan

  destroy-eks:
    dir: '{{ .TF_EKS_AWS_DIR }}'
    deps:
      - init-eks
    desc: Destroy EKS terraform
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

  # Karpernter Manifest
  init-karpenter-manifests:
    dir: '{{ .TF_KARPENTER_MANIFESTS_DIR }}'
    deps:
      - fmt
    desc: Initialize Karpenter Manifests
    cmds:
      - echo "+++++ Deploying Karpenter Manifests +++++"
      - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET_DEV" -backend-config="encrypt=true" -backend-config="key=${TF_KARPENTER_MANIFESTS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-karpenter-manifests:
    dir: '{{ .TF_KARPENTER_MANIFESTS_DIR }}'
    deps:
      - init-karpenter-manifests
    desc: Create Karpenter Manifests
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -out=tfplan
      - terraform apply tfplan

  destroy-karpenter-manifests:
    dir: '{{ .TF_KARPENTER_MANIFESTS_DIR }}'
    deps:
      - init-karpenter-manifests
    desc: Destroy Karpenter Manifests
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

# Kube Support Resources
  init-kube-support:
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    deps:
      - fmt
    desc: Initialize Kube Support
    cmds:
      - echo "+++++ Deploying Kube Support +++++"
      - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET_DEV" -backend-config="encrypt=true" -backend-config="key=${TF_KUBE_SUPP_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-kube-support:
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    deps:
      - init-kube-support
    desc: Create Kube Support
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -var "commit=${COMMIT}" -out=tfplan
      - terraform apply tfplan

  destroy-kube-support:
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    deps:
      - init-kube-support
    desc: Destroy Kube Support
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -var "commit=${COMMIT}" -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

# Monitoring AWS
  init-monitoring:
    dir: '{{ .TF_MONITORING_DIR }}'
    deps:
      - fmt
    desc: Initialize Monitoring
    cmds:
      - echo "+++++ Deploying Monitoring +++++"
      - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET_DEV" -backend-config="encrypt=true" -backend-config="key=${TF_MONITORING_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-monitoring:
    dir: '{{ .TF_MONITORING_DIR }}'
    deps:
      - init-monitoring
    desc: Create Monitoring
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -var "commit=${COMMIT}" -out=tfplan
      - terraform apply tfplan

  destroy-monitoring:
    dir: '{{ .TF_MONITORING_DIR }}'
    deps:
      - init-monitoring
    desc: Destroy Monitoring
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -var "commit=${COMMIT}" -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

# DNS Update
  retrieve-elb:
    desc: Retrieve ELB DNS Name
    cmds:
      - AWS_PAGER="" aws elb describe-load-balancers --region us-east-1 --query 'LoadBalancerDescriptions[0].DNSName' --output text

  init-dns:
    dir: '{{ .TF_DNS_DIR }}'
    deps:
      - fmt
    desc: Initialize DNS
    cmds:
      - echo "+++++ Deploying DNS +++++"
      - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET_PROD" -backend-config="encrypt=true" -backend-config="key=terraform/dns/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-dns:
    dir: '{{ .TF_DNS_DIR }}'
    deps:
      - init-dns
    desc: Create DNS
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -var "commit=${COMMIT}" -var "dns_zone=${DNS_ZONE}" -var "elb_dns_name=${ELB_DNS_NAME}" -out=tfplan
      - terraform apply tfplan

  destroy-dns:
    dir: '{{ .TF_DNS_DIR }}'
    deps:
      - init-dns
    desc: Destroy DNS
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

# Create VPC
  init-vpc:
    dir: '{{ .TF_VPC_AWS_DIR }}'
    deps:
      - fmt
    desc: Initialize VPC
    cmds:
      - echo "+++++ Deploying VPC +++++"
      - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET_DEV" -backend-config="encrypt=true" -backend-config="key=${TF_VPC_AWS_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-vpc:
    dir: '{{ .TF_VPC_AWS_DIR }}'
    deps:
      - init-vpc
    desc: Create VPC
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -out=tfplan
      - terraform apply tfplan

  destroy-vpc:
    dir: '{{ .TF_VPC_AWS_DIR }}'
    deps:
      - init-vpc
    desc: Destroy VPC
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

  # Create VPN
  init-vpn:
    dir: '{{ .TF_CLIENT_VPN_DIR }}'
    deps:
      - fmt
    desc: Initialize VPN
    cmds:
      - echo "+++++ Deploying VPN +++++"
      - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET_DEV" -backend-config="encrypt=true" -backend-config="key=${TF_CLIENT_VPN_DIR}/terraform.tfstate" -backend-config="region=us-east-1" -upgrade -reconfigure

  create-vpn:
    dir: '{{ .TF_CLIENT_VPN_DIR }}'
    deps:
      - init-vpn
    desc: Create VPN
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan
      - terraform plan -var "branch=${BRANCH}" -out=tfplan
      - terraform apply tfplan

  create-vpc-vpn:
    desc: Create VPC and VPN
    cmds:
      - task: create-vpc
      - task: create-vpn

  destroy-vpc-vpn:
    desc: Destroy VPC and VPN
    cmds:
      - task: destroy-vpn
      - task: destroy-vpc

  destroy-vpn:
    dir: '{{ .TF_CLIENT_VPN_DIR }}'
    deps:
      - init-vpn
    desc: Destroy VPN
    cmds:
      - defer: |
          echo "Cleaning up..."
          rm -f tfplan.destroy
      - terraform plan -var "branch=${BRANCH}" -out=tfplan.destroy -destroy
      - terraform apply tfplan.destroy

# Deploy or Destroy cluster
  create-cluster:
    desc: Create Cluster
    cmds:
      - task: create-eks
      - task: create-kube-support
      - task: create-karpenter-manifests
      - task: create-monitoring
      - task: connect-eks-cluster
      - task: retrieve-elb

  destroy-cluster:
    desc: Destroy Cluster
    cmds:
      - task: destroy-monitoring
      - task: destroy-karpenter-manifests
      - task: destroy-kube-support
      - task: destroy-eks

# Deploy or Destroy all
  create-all:
    desc: Create All
    cmds:
      - task: deploy-cluster
      - task: create-atlantis

  destroy-all:
    desc: Destroy All
    cmds:
      - task: destroy-atlantis
      - task: destroy-cluster

# Trivy scans
  trivy-atlantis:
    desc: Trivy scan for Atlantis
    dir: '{{ .TF_ATLANTIS_DIR }}'
    cmds:
      - trivy config --tf-vars terraform.tfvars .

  trivy-eks:
    desc: Trivy scan for EKS
    dir: '{{ .TF_EKS_AWS_DIR }}'
    cmds:
      - trivy config .

  trivy-kube-support:
    desc: Trivy scan for Kube Support
    dir: '{{ .TF_KUBE_SUPP_DIR }}'
    cmds:
      - trivy config .

  trivy-monitoring:
    desc: Trivy scan for Monitoring
    dir: '{{ .TF_MONITORING_DIR }}'
    cmds:
      - trivy config .

  trivy-apps-local:
    desc: Trivy scan for Apps Local
    dir: '{{ .TF_APPS_LOCAL_DIR }}'
    cmds:
      - trivy config . --severity HIGH,CRITICAL